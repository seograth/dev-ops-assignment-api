pipeline {
    agent any

    environment {
        PYTHON_ENV = 'venv'
        DOCKER_BUILDKIT = 1
        DOCKER_IMAGE = 'seograth/fastapi-demo'
        VERSION_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Python Environment') {
            steps {
                sh '''
                    python3 -m venv ${PYTHON_ENV}
                    . ${PYTHON_ENV}/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }
        stage('Start Application') {
            steps {
                sh '''
                    . ${PYTHON_ENV}/bin/activate
                    uvicorn app.main:app --host 0.0.0.0 --port 8000 &
                    echo $! > fastapi.pid
                    sleep 10
                '''
            }
        }
         stage('Run Tests') {
            steps {
                sh '''
                    . ${PYTHON_ENV}/bin/activate
                    pytest 
                '''
            }
        }
         stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${VERSION_TAG}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_IMAGE}:${VERSION_TAG}
                    '''
                }
            }
        }
    }
    post {
        always {
            // Stop FastAPI and clean up
            sh '''
                #!/bin/bash
                if [ -f fastapi.pid ]; then
                    kill $(cat fastapi.pid) || true
                    rm fastapi.pid
                fi
                rm -rf ${PYTHON_ENV}
            '''
        }
    }
}
